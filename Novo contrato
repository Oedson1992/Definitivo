// SPDX-License-Identifier: MIT
pragma solidity 0.8.10;

// Importações atualizadas do OpenZeppelin (via NPM)
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";

contract StableGoldX is ERC20, Ownable, ReentrancyGuard, Pausable {
    // ====== VARIÁVEIS DE ESTADO ======
    uint256 public goldReserve;
    uint256 public btcReserve;
    uint256 public ethReserve;

    // ====== CONSTANTES DE TEMPO (EM BLOCOS) ======
    uint256 public constant WITHDRAWAL_COOLDOWN_BLOCKS = 600;  // ~1 hora (Bitcoin: 6 blocos = 1h)
    uint256 public constant GLOBAL_COOLDOWN_BLOCKS = 120;      // ~10 minutos (tempo médio de bloco BTC)

    // ====== LIMITES DE SAQUE ======
    uint256 public maxWithdrawal;
    uint256 public constant DAILY_WITHDRAWAL_LIMIT = 5000 * 10**18;  // Limite diário ajustado para 18 decimais
    uint256 public constant MAX_DAILY_WITHDRAWALS = 3;               // Máximo de saques por dia

    // ====== LIMITES DE DEPÓSITO ======
    uint256 public constant MIN_DEPOSIT_AMOUNT = 1 * 10**18;
    uint256 public constant MAX_DEPOSIT_AMOUNT = 10000 * 10**18;

    // ====== ESTRUTURAS DE DADOS ======
    struct WithdrawalInfo {
        uint256 lastWithdrawalBlock;
        uint256 dailyWithdrawalAmount;
        uint256 lastDepositBlock;
        uint256 dailyWithdrawals;
    }

    mapping(address => WithdrawalInfo) public userWithdrawals;

    // ====== MECANISMO DE GOVERNANÇA ======
    uint256 public approverCount;
    bool public withdrawalLocked;
    uint256 public lastGlobalWithdrawalBlock;

    address[] public approvers;
    mapping(address => bool) public isApprover;
    uint256 public requiredApprovals;

    // ====== EVENTOS ======
    event GoldDeposited(uint256 amount);
    event GoldWithdrawn(uint256 amount);
    event BTCDeposited(uint256 amount);
    event BTCWithdrawn(uint256 amount);
    event ETHDeposited(uint256 amount);
    event ETHWithdrawn(uint256 amount);
    event MaxWithdrawalUpdated(uint256 newMaxWithdrawal);
    event WithdrawalLocked(bool locked);
    event NewApproverAdded(address approver);
    event ApproverRemoved(address approver);

    // ====== CONSTRUTOR ======
    constructor(uint256 initialMaxWithdrawal, uint256 _requiredApprovals) 
        ERC20("Stable GoldX", "SGX") 
    {
        maxWithdrawal = initialMaxWithdrawal;
        requiredApprovals = _requiredApprovals;
        approvers.push(msg.sender);
        isApprover[msg.sender] = true;
        approverCount = 1;
    }

    // ====== MODIFICADORES ======
    modifier onlyApprover() {
        require(isApprover[msg.sender], "StableGoldX: Not an approver");
        _;
    }

    // ====== FUNÇÕES DE DEPÓSITO ======
    function depositGold(uint256 goldAmount) external onlyOwner whenNotPaused {
        require(goldAmount >= MIN_DEPOSIT_AMOUNT, "StableGoldX: Deposit too small");
        require(goldAmount <= MAX_DEPOSIT_AMOUNT, "StableGoldX: Deposit exceeds limit");

        goldReserve += goldAmount;
        _mint(msg.sender, goldAmount);
        emit GoldDeposited(goldAmount);
    }

    function depositBTC(uint256 btcAmount) external onlyOwner whenNotPaused {
        require(btcAmount > 0, "StableGoldX: Amount must be > 0");
        btcReserve += btcAmount;
        emit BTCDeposited(btcAmount);
    }

    function depositETH(uint256 ethAmount) external onlyOwner whenNotPaused {
        require(ethAmount > 0, "StableGoldX: Amount must be > 0");
        ethReserve += ethAmount;
        emit ETHDeposited(ethAmount);
    }

    // ====== FUNÇÕES DE SAQUE ======
    function withdrawGold(uint256 tokenAmount) external nonReentrant whenNotPaused {
        require(!withdrawalLocked, "StableGoldX: Withdrawals locked");
        require(tokenAmount > 0, "StableGoldX: Amount must be > 0");
        require(balanceOf(msg.sender) >= tokenAmount, "StableGoldX: Insufficient balance");
        require(goldReserve >= tokenAmount, "StableGoldX: Insufficient reserve");

        WithdrawalInfo storage user = userWithdrawals[msg.sender];

        require(
            block.number >= user.lastWithdrawalBlock + WITHDRAWAL_COOLDOWN_BLOCKS, 
            "StableGoldX: Cooldown active"
        );
        require(
            user.dailyWithdrawalAmount + tokenAmount <= DAILY_WITHDRAWAL_LIMIT,
            "StableGoldX: Daily limit exceeded"
        );
        require(
            user.dailyWithdrawals < MAX_DAILY_WITHDRAWALS,
            "StableGoldX: Max withdrawals reached"
        );
        require(
            block.number >= lastGlobalWithdrawalBlock + GLOBAL_COOLDOWN_BLOCKS,
            "StableGoldX: Global cooldown"
        );

        _burn(msg.sender, tokenAmount);
        goldReserve -= tokenAmount;

        // Atualiza registros
        user.lastWithdrawalBlock = block.number;
        user.dailyWithdrawalAmount += tokenAmount;
        user.dailyWithdrawals += 1;
        lastGlobalWithdrawalBlock = block.number;

        emit GoldWithdrawn(tokenAmount);
    }

    function withdrawBTC(uint256 btcAmount) external onlyOwner nonReentrant whenNotPaused {
        require(btcReserve >= btcAmount, "StableGoldX: Insufficient BTC reserve");
        btcReserve -= btcAmount;
        emit BTCWithdrawn(btcAmount);
    }

    function withdrawETH(uint256 ethAmount) external onlyOwner nonReentrant whenNotPaused {
        require(ethReserve >= ethAmount, "StableGoldX: Insufficient ETH reserve");
        ethReserve -= ethAmount;
        emit ETHWithdrawn(ethAmount);
    }

    // ====== FUNÇÕES DE GOVERNANÇA ======
    function addApprover(address newApprover) external onlyOwner {
        require(!isApprover[newApprover], "StableGoldX: Already approver");
        approvers.push(newApprover);
        isApprover[newApprover] = true;
        approverCount++;
        emit NewApproverAdded(newApprover);
    }

    function removeApprover(address approver) external onlyOwner {
        require(isApprover[approver], "StableGoldX: Not approver");
        isApprover[approver] = false;
        approverCount--;
        emit ApproverRemoved(approver);
    }

    function setRequiredApprovals(uint256 _requiredApprovals) external onlyOwner {
        requiredApprovals = _requiredApprovals;
    }

    function updateMaxWithdrawal(uint256 newMaxWithdrawal) external onlyApprover {
        require(approverCount >= requiredApprovals, "StableGoldX: Not enough approvals");
        maxWithdrawal = newMaxWithdrawal;
        emit MaxWithdrawalUpdated(newMaxWithdrawal);
    }

    // ====== FUNÇÕES DE EMERGÊNCIA ======
    function setWithdrawalLock(bool locked) external onlyOwner {
        withdrawalLocked = locked;
        emit WithdrawalLocked(locked);
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }
}
